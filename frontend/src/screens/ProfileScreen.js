import React, { useState, useCallback, useMemo } from 'react';
import { View, Text, StyleSheet, ScrollView, ActivityIndicator, Dimensions, TouchableOpacity, FlatList, Linking, Image, Alert } from 'react-native';
import { useFocusEffect, useNavigation } from '@react-navigation/native';
import { Calendar } from 'react-native-calendars';
import apiClient from '../api/apiClient';
import { useAuth } from '../context/AuthContext';
import Icon from 'react-native-vector-icons/Ionicons';
import { COLORS, SIZES, FONTS } from '../styles/theme';
import Card from '../components/common/Card';
// ðŸ‘‡ NEW IMPORTS for caching
import { getCacheItem, setCacheItem, clearCacheItem } from '../services/cacheService'; 

const screenWidth = Dimensions.get('window').width;
const DASHBOARD_CACHE_KEY = 'userDashboard';
const BADGES_CACHE_KEY = 'userBadges';

const JourneyCard = ({ journey, navigation }) => {
Â  const progress = journey.total_problems > 0 ? (journey.solved_problems / journey.total_problems) : 0;
Â  const progressPercent = Math.round(progress * 100);
Â  return (
Â  Â  <TouchableOpacity 
Â  Â  Â  style={styles.journeyCard} 
Â  Â  Â  onPress={() => navigation.navigate('RoomDetail', { roomId: journey.id, roomName: journey.name })}
Â  Â  >
Â  Â  Â  <Text style={styles.journeyRoomName}>{journey.name}</Text>
Â  Â  Â  <Text style={styles.journeySheetName}>{journey.sheet_name}</Text>
Â  Â  Â  <View style={styles.progressContainer}>
Â  Â  Â  Â  <View style={styles.progressLabels}>
Â  Â  Â  Â  Â  Â  <Text style={styles.progressText}>{journey.solved_problems} / {journey.total_problems} Solved</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.progressText}>{progressPercent}%</Text>
Â  Â  Â  Â  </View>
Â  Â  Â  Â  <View style={styles.progressBarBackground}>
Â  Â  Â  Â  Â  <View style={[styles.progressBarFill, { width: `${progressPercent}%` }]} />
Â  Â  Â  Â  </View>
Â  Â  Â  </View>
Â  Â  Â  Â <Text style={styles.dateText}>
Â  Â  Â  Â  {new Date(journey.start_date).toLocaleDateString()} - {new Date(journey.end_date).toLocaleDateString()}
Â  Â  Â  </Text>
Â  Â  </TouchableOpacity>
Â  );
};


const ProfileScreen = () => {
Â  const navigation = useNavigation();
Â  const [isLoading, setIsLoading] = useState(true);
Â  const [dashboardData, setDashboardData] = useState(null);
Â  const [badges, setBadges] = useState([]);
Â  
Â  // ðŸŒŸ UPDATED: FETCH DATA WITH CACHING
Â  const fetchData = async () => {
        let isCacheHit = false;

        // 1. TRY CACHE LOAD FIRST (for instant display)
        const cachedDashboard = await getCacheItem(DASHBOARD_CACHE_KEY);
        const cachedBadges = await getCacheItem(BADGES_CACHE_KEY);
        
        if (cachedDashboard && cachedBadges) {
            setDashboardData(cachedDashboard);
            setBadges(cachedBadges);
            setIsLoading(false);
            isCacheHit = true;
            console.log('Profile loaded instantly from cache.');
        } else if (!isCacheHit) {
             setIsLoading(true); // Show spinner only if cache miss
        }

Â  Â  try {
Â  Â  Â  // 2. FETCH FROM NETWORK (to refresh cache and get initial data if miss)
Â  Â  Â  const [dashboardRes, badgesRes] = await Promise.all([
Â  Â  Â  Â  apiClient.get('/users/progress-dashboard'),
Â  Â  Â  Â  apiClient.get('/badges/my-badges')
Â  Â  Â  ]);
Â  Â  Â  
Â  Â  Â  Â  const networkDashboardData = dashboardRes.data;
Â  Â  Â  Â  const networkBadges = badgesRes.data;

Â  Â  Â  Â  // 3. UPDATE STATE AND CACHE ONLY IF DATA HAS CHANGED (Flicker Fix)
Â  Â  Â  Â  if (JSON.stringify(networkDashboardData) !== JSON.stringify(dashboardData)) {
Â  Â  Â  Â  Â  Â  setDashboardData(networkDashboardData);
Â  Â  Â  Â  Â  Â  await setCacheItem(DASHBOARD_CACHE_KEY, networkDashboardData);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  if (JSON.stringify(networkBadges) !== JSON.stringify(badges)) {
Â  Â  Â  Â  Â  Â  setBadges(networkBadges);
Â  Â  Â  Â  Â  Â  await setCacheItem(BADGES_CACHE_KEY, networkBadges);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to fetch dashboard data:', error);
Â  Â  Â  if (!isCacheHit) Alert.alert('Error', 'Could not load profile dashboard.');
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };

Â  useFocusEffect(useCallback(() => { fetchData(); }, []));

Â  const markedDates = useMemo(() => {
Â  Â  if (!dashboardData?.contributionData) return {};
Â  Â  const marked = {};
Â  Â  dashboardData.contributionData.forEach(item => {
Â  Â  Â  marked[item.date] = { selected: true, selectedColor: COLORS.success };
Â  Â  });
Â  Â  return marked;
Â  }, [dashboardData]);

Â  if (isLoading) { return <ActivityIndicator size="large" style={styles.centered} color={COLORS.primary} />; }
Â  if (!dashboardData || !dashboardData.userInfo) { return <View style={styles.centered}><Text>Could not load profile data.</Text></View>; }
Â  
Â  const { userInfo, activeJourneys } = dashboardData;
Â  const hasSocialLinks = userInfo.github_url || userInfo.linkedin_url || userInfo.twitter_url;

Â  return (
Â  Â  <ScrollView style={styles.container}>
Â  Â  Â  {/* --- USER HEADER with AVATAR --- */}
Â  Â  Â  <View style={styles.header}>
Â  Â  Â  Â  <Image 
Â  Â  Â  Â  Â  Â  // ðŸŒŸ FLICKER FIX: Relying on the base URL and RN's cache
Â  Â  Â  Â  Â  Â  source={userInfo.avatar_url ? { uri: userInfo.avatar_url } : require('../assets/images/default_avatar.png')} 
Â  Â  Â  Â  Â  Â  style={styles.avatar}
Â  Â  Â  Â  />
Â  Â  Â  Â  <View style={styles.headerText}>
Â  Â  Â  Â  Â  Â  <Text style={styles.fullName}>{userInfo.full_name || userInfo.username}</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.username}>@{userInfo.username}</Text>
Â  Â  Â  Â  </View>
Â  Â  Â  Â  <TouchableOpacity style={styles.editButton} onPress={() => navigation.navigate('EditProfile')}>
Â  Â  Â  Â  Â  Â  <Icon name="pencil-outline" size={20} color={COLORS.primary}/>
Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  </View>
Â  Â  Â  
Â  Â  Â  {hasSocialLinks && (
Â  Â  Â  Â  <View style={styles.socialsContainer}>
Â  Â  Â  Â  Â  Â  {userInfo.github_url && <TouchableOpacity onPress={() => Linking.openURL(userInfo.github_url)}><Icon name="logo-github" size={28} color={COLORS.textPrimary} /></TouchableOpacity>}
Â  Â  Â  Â  Â  Â  {userInfo.linkedin_url && <TouchableOpacity onPress={() => Linking.openURL(userInfo.linkedin_url)}><Icon name="logo-linkedin" size={28} color="#0077b5" /></TouchableOpacity>}
Â  Â  Â  Â  Â  Â  {userInfo.twitter_url && <TouchableOpacity onPress={() => Linking.openURL(userInfo.twitter_url)}><Icon name="logo-twitter" size={28} color="#1DA1F2" /></TouchableOpacity>}
Â  Â  Â  Â  </View>
Â  Â  Â  )}

Â  Â  Â  {/* --- STATS CARDS --- */}
Â  Â  Â  <View style={styles.statsContainer}>
Â  Â  Â  Â  <Card style={styles.statBox}><Text style={styles.statValue}>{userInfo.current_streak || 0} ðŸ”¥</Text><Text style={styles.statLabel}>Current Streak</Text></Card>
Â  Â  Â  Â  <Card style={styles.statBox}><Text style={styles.statValue}>{userInfo.max_streak || 0}</Text><Text style={styles.statLabel}>Max Streak</Text></Card>
Â  Â  Â  </View>
Â  Â  Â  
Â  Â  Â  {/* --- BIO SECTION --- */}
Â  Â  Â  {userInfo.bio && (
Â  Â  Â  Â  <Card style={styles.section}>
Â  Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>About Me</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.bioText}>{userInfo.bio}</Text>
Â  Â  Â  Â  </Card>
Â  Â  Â  )}

Â  Â  Â  {/* --- ACTIVE JOURNEYS SECTION --- */}
Â  Â  Â  <View style={styles.section}>
Â  Â  Â  Â  <Text style={styles.sectionTitle}>My Active Journeys</Text>
Â  Â  Â  Â  {activeJourneys && activeJourneys.length > 0 ? (
Â  Â  Â  Â  Â  <FlatList
Â  Â  Â  Â  Â  Â  data={activeJourneys}
Â  Â  Â  Â  Â  Â  renderItem={({item}) => <JourneyCard journey={item} navigation={navigation} />}
Â  Â  Â  Â  Â  Â  keyExtractor={(item) => item.id.toString()}
Â  Â  Â  Â  Â  Â  horizontal
Â  Â  Â  Â  Â  Â  showsHorizontalScrollIndicator={false}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  ) : ( <Text style={styles.noDataText}>No active journeys. Join a room to get started!</Text> )}
Â  Â  Â  </View>
Â  Â  Â  
Â  Â  Â  {/* --- ACHIEVEMENTS SECTION --- */}
Â  Â  Â  <View style={styles.section}>
Â  Â  Â  Â  <Text style={styles.sectionTitle}>Achievements</Text>
Â  Â  Â  Â  <FlatList
Â  Â  Â  Â  Â  data={badges}
Â  Â  Â  Â  Â  keyExtractor={(item) => item.name}
Â  Â  Â  Â  Â  horizontal
Â  Â  Â  Â  Â  showsHorizontalScrollIndicator={false}
Â  Â  Â  Â  Â  renderItem={({ item }) => (
Â  Â  Â  Â  Â  Â  <View style={styles.badge}>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.badgeEmoji}>{item.icon_emoji}</Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.badgeName}>{item.name}</Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  ListEmptyComponent={<Text style={styles.noDataText}>No badges earned yet. Keep solving!</Text>}
Â  Â  Â  Â  />
Â  Â  Â  </View>

Â  Â  Â  {/* --- PROFILE DETAILS SECTION --- */}
Â  Â  Â  <Card style={styles.section}>
Â  Â  Â  Â  <Text style={styles.sectionTitle}>Profile Details</Text>
Â  Â  Â  Â  <View style={styles.detailRow}><Text style={styles.detailLabel}>College:</Text><Text style={styles.detailValue}>{userInfo.college_name || 'Not set'}</Text></View>
Â  Â  Â  Â  <View style={styles.detailRow}><Text style={styles.detailLabel}>Course:</Text><Text style={styles.detailValue}>{userInfo.course || 'Not set'}</Text></View>
Â  Â  Â  Â  <View style={styles.detailRow}><Text style={styles.detailLabel}>Branch:</Text><Text style={styles.detailValue}>{userInfo.branch || 'Not set'}</Text></View>
Â  Â  Â  Â  <View style={styles.detailRow}><Text style={styles.detailLabel}>Graduating:</Text><Text style={styles.detailValue}>{userInfo.graduation_year || 'Not set'}</Text></View>
Â  Â  Â  </Card>

Â  Â  Â  {/* --- CALENDAR --- */}
Â  Â  Â  <Card style={styles.section}>
Â  Â  Â  Â  <Text style={styles.sectionTitle}>Solving Activity</Text>
Â  Â  Â  Â  <Calendar
Â  Â  Â  Â  Â  markedDates={markedDates}
Â  Â  Â  Â  Â  theme={{
Â  Â  Â  Â  Â  Â  calendarBackground: COLORS.surface,
Â  Â  Â  Â  Â  Â  arrowColor: COLORS.primary,
Â  Â  Â  Â  Â  Â  monthTextColor: COLORS.textPrimary,
Â  Â  Â  Â  Â  Â  textMonthFontWeight: 'bold',
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  />
Â  Â  Â  </Card>
Â  Â  </ScrollView>
Â  );
};

const styles = StyleSheet.create({
Â  Â  container: { flex: 1, backgroundColor: COLORS.background },
Â  Â  centered: { flex: 1, justifyContent: 'center', alignItems: 'center' },
Â  Â  header: {
Â  Â  Â  Â  backgroundColor: COLORS.surface,
Â  Â  Â  Â  paddingHorizontal: SIZES.padding,
Â  Â  Â  Â  paddingTop: SIZES.padding,
Â  Â  Â  Â  paddingBottom: SIZES.padding,
Â  Â  Â  Â  flexDirection: 'row',
Â  Â  Â  Â  alignItems: 'center',
Â  Â  },
Â  Â  avatar: {
Â  Â  Â  Â  width: 80,
Â  Â  Â  Â  height: 80,
Â  Â  Â  Â  borderRadius: 40,
Â  Â  Â  Â  borderWidth: 2,
Â  Â  Â  Â  borderColor: COLORS.primary,
Â  Â  },
Â  Â  headerText: {
Â  Â  Â  Â  flex: 1,
Â  Â  Â  Â  marginLeft: SIZES.padding,
Â  Â  },
Â  Â  fullName: { ...FONTS.h1 },
Â  Â  username: { ...FONTS.body, color: COLORS.textSecondary },
Â  Â  editButton: { padding: SIZES.base, borderRadius: 20, backgroundColor: COLORS.background },
Â  Â  socialsContainer: {
Â  Â  Â  Â  flexDirection: 'row',
Â  Â  Â  Â  justifyContent: 'center',
Â  Â  Â  Â  gap: SIZES.padding,
Â  Â  Â  Â  paddingVertical: SIZES.base * 2,
Â  Â  Â  Â  backgroundColor: COLORS.surface,
Â  Â  Â  Â  borderTopWidth: 1,
Â  Â  Â  Â  borderTopColor: COLORS.border,
Â  Â  },
Â  Â  statsContainer: { flexDirection: 'row', justifyContent: 'space-between', paddingHorizontal: SIZES.padding, marginTop: SIZES.padding },
Â  Â  statBox: { flex: 1, marginHorizontal: SIZES.base / 2, alignItems: 'center', padding: SIZES.padding, marginBottom: 0 },
Â  Â  statValue: { ...FONTS.h2, color: COLORS.primary },
Â  Â  statLabel: { ...FONTS.caption, marginTop: SIZES.base / 2 },
Â  Â  section: { marginHorizontal: SIZES.padding, marginTop: SIZES.base, backgroundColor: 'transparent', elevation: 0 },
Â  Â  sectionTitle: { ...FONTS.h3, marginBottom: SIZES.base, paddingLeft: SIZES.base },
Â  Â  bioText: { ...FONTS.body, color: COLORS.textSecondary, fontStyle: 'italic' },
Â  Â  // --- ACTIVE JOURNEYS FLATLIST & CARD STYLES ---
Â  Â  journeyList: {
Â  Â  Â  paddingHorizontal: SIZES.padding,
Â  Â  },
Â  Â  journeyCard: {
Â  Â  Â  backgroundColor: COLORS.background,
Â  Â  Â  borderRadius: SIZES.radius,
Â  Â  Â  padding: SIZES.padding,
Â  Â  Â  marginRight: SIZES.base,
Â  Â  Â  width: screenWidth * 0.7,
Â  Â  Â  elevation: 2,
Â  Â  Â  shadowColor: '#000',
Â  Â  Â  shadowOffset: { width: 0, height: 1 },
Â  Â  Â  shadowOpacity: 0.1,
Â  Â  Â  shadowRadius: 2,
Â  Â  Â  borderWidth: 1,
Â  Â  Â  borderColor: COLORS.border,
Â  Â  },
Â  Â  
Â  Â  // --- PROGRESS BAR STYLES ---
Â  Â  progressContainer: {
Â  Â  Â  marginTop: SIZES.padding,
Â  Â  },
Â  Â  progressLabels: {
Â  Â  Â  flexDirection: 'row',
Â  Â  Â  justifyContent: 'space-between',
Â  Â  Â  marginBottom: SIZES.base,
Â  Â  },
Â  Â  progressText: {
Â  Â  Â  ...FONTS.body,
Â  Â  Â  color: COLORS.textSecondary,
Â  Â  },
Â  Â  progressBarBackground: {
Â  Â  Â  height: 6,
Â  Â  Â  backgroundColor: COLORS.border,
Â  Â  Â  borderRadius: 3,
Â  Â  },
Â  Â  progressBarFill: {
Â  Â  Â  height: '100%',
Â  Â  Â  backgroundColor: COLORS.primary,
Â  Â  Â  borderRadius: 3,
Â  Â  },
Â  Â  
Â  Â  // --- OTHER STYLES ---
Â  Â  dateText: {
Â  Â  Â  ...FONTS.caption,
Â  Â  Â  color: COLORS.textSecondary,
Â  Â  Â  marginTop: SIZES.base,
Â  Â  },
Â  Â  detailRow: {
Â  Â  Â  flexDirection: 'row',
Â  Â  Â  justifyContent: 'space-between',
Â  Â  Â  paddingVertical: SIZES.base,
Â  Â  Â  borderBottomWidth: 1,
Â  Â  Â  borderBottomColor: COLORS.border,
Â  Â  },
Â  Â  detailLabel: {
Â  Â  Â  ...FONTS.body,
Â  Â  Â  color: COLORS.textSecondary,
Â  Â  },
Â  Â  detailValue: {
Â  Â  Â  ...FONTS.body,
Â  Â  Â  fontWeight: '500',
Â  Â  Â  maxWidth: '60%', 
Â  Â  Â  textAlign: 'right',
Â  Â  Â  color: COLORS.textPrimary,
Â  Â  },
Â  Â  noDataText: {
Â  Â  Â  ...FONTS.body,
Â  Â  Â  color: COLORS.textSecondary,
Â  Â  Â  textAlign: 'center',
Â  Â  Â  padding: SIZES.padding,
Â  Â  },
Â  Â  badge: {
Â  Â  Â  Â  alignItems: 'center',
Â  Â  Â  Â  justifyContent: 'flex-start',
Â  Â  Â  Â  backgroundColor: COLORS.background,
Â  Â  Â  Â  borderRadius: SIZES.radius,
Â  Â  Â  Â  padding: SIZES.base * 1.5,
Â  Â  Â  Â  marginRight: SIZES.base,
Â  Â  Â  Â  width: 120,
Â  Â  Â  Â  height: 120,
Â  Â  },
Â  Â  badgeEmoji: {
Â  Â  Â  Â  fontSize: 40,
Â  Â  Â  Â  marginBottom: SIZES.base / 2,
Â  Â  },
Â  Â  badgeName: {
Â  Â  Â  Â  ...FONTS.caption,
Â  Â  Â  Â  fontWeight: 'bold',
Â  Â  Â  Â  textAlign: 'center',
Â  Â  },
Â  Â  badgeDescription: {
Â  Â  Â  Â  ...FONTS.caption,
Â  Â  Â  Â  fontSize: 10,
Â  Â  Â  Â  textAlign: 'center',
Â  Â  Â  Â  marginTop: 2,
Â  Â  },
});

export default ProfileScreen;