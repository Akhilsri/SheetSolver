import React, { useState, useEffect } from 'react';
import { jwtDecode } from 'jwt-decode';
import AsyncStorage from '@react-native-async-storage/async-storage';
import apiClient from '../api/apiClient';
import { initializeNotifications } from '../services/notificationService';

// Define all cache keys used across the application here for centralized cleanup
const ROOMS_CACHE_KEY = 'userRooms'; 
const DASHBOARD_CACHE_KEY = 'userDashboard';
const BADGES_CACHE_KEY = 'userBadges';
const NOTIF_CACHE_KEY = 'userNotifications';


const AuthContext = React.createContext();

export const AuthProvider = ({ children }) => {
Â  const [isLoading, setIsLoading] = useState(true);
Â  const [userToken, setUserToken] = useState(null); // This is the accessToken
Â  const [userId, setUserId] = useState(null);
Â  const [username, setUsername] = useState(null);
Â  const [unreadCount, setUnreadCount] = useState(0); // For general notifications
Â  const [unreadMessageCount, setUnreadMessageCount] = useState(0); // For private messages

    // ðŸŒŸ These setters were missing from the provided code and are CRITICAL for the socket optimization!
    const setUnreadCountDirectly = (count) => setUnreadCount(count);
    const setUnreadMessageCountDirectly = (count) => setUnreadMessageCount(count);


Â  const login = async (email, password) => {
Â  Â  try {
Â  Â  Â  const response = await apiClient.post('/auth/login', { email, password });
Â  Â  Â  const { accessToken, refreshToken } = response.data;
Â  Â  Â  
Â  Â  Â  if (accessToken && refreshToken) {
Â  Â  Â  Â  const decodedToken = jwtDecode(accessToken);
Â  Â  Â  Â  
Â  Â  Â  Â  setUserToken(accessToken);
Â  Â  Â  Â  setUserId(decodedToken.userId);
Â  Â  Â  Â  setUsername(decodedToken.username);

Â  Â  Â  Â  await AsyncStorage.setItem('accessToken', accessToken);
Â  Â  Â  Â  await AsyncStorage.setItem('refreshToken', refreshToken);
Â  Â  Â  Â  
Â  Â  Â  Â  await initializeNotifications();
Â  Â  Â  Â  fetchUnreadCount();
Â  Â  Â  Â  fetchUnreadMessageCount(); // Fetch count on login
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error('Login failed:', error);
Â  Â  Â  throw new Error('Login failed. Please check your credentials.');
Â  Â  }
Â  };

Â  const logout = async () => {
Â  Â  setUserToken(null);
Â  Â  setUserId(null);
Â  Â  setUsername(null);
Â  Â  setUnreadCount(0);
Â  Â  setUnreadMessageCount(0); // Reset on logout
Â  Â  
Â  Â  await AsyncStorage.removeItem('accessToken');
Â  Â  await AsyncStorage.removeItem('refreshToken');
Â  Â  
Â  Â  // Clear all caches for user-specific data on logout
Â  Â  await AsyncStorage.removeItem(ROOMS_CACHE_KEY);
Â  Â  await AsyncStorage.removeItem(DASHBOARD_CACHE_KEY);
Â  Â  await AsyncStorage.removeItem(BADGES_CACHE_KEY);
Â  Â  await AsyncStorage.removeItem(NOTIF_CACHE_KEY);
Â  };

Â  const isLoggedIn = async () => {
Â  Â  try {
Â  Â  Â  const accessToken = await AsyncStorage.getItem('accessToken');
Â  Â  Â  if (accessToken) {
Â  Â  Â  Â  const decodedToken = jwtDecode(accessToken);
Â  Â  Â  Â  setUserToken(accessToken);
Â  Â  Â  Â  setUserId(decodedToken.userId);
Â  Â  Â  Â  setUsername(decodedToken.username);
Â  Â  Â  Â  
Â  Â  Â  Â  fetchUnreadCount();
Â  Â  Â  Â  fetchUnreadMessageCount(); // Fetch on startup
Â  Â  Â  }
Â  Â  } catch (e) {
Â  Â  Â  console.log(`isLoggedIn error: ${e}. Clearing tokens.`);
Â  Â  Â  await logout();
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };
Â  
Â  const fetchUnreadCount = async () => {
  try {
    const response = await apiClient.get('/notifications/unread-count');
    console.log("ðŸ“© Backend unread count response:", response.data);

    // âœ… FIX: Use `count` as returned by your backend
    setUnreadCount(Number(response.data.count || 0));
  } catch (error) {
    console.error("Failed to fetch unread count:", error);
  }
};
Â  
Â  const fetchUnreadMessageCount = async () => {
Â  Â  // Guard clause prevents 401 error during logout
Â  Â  if (!userToken) { return; } 
Â  Â  try {
Â  Â  Â  const response = await apiClient.get('/chat/unread-count');
      // ðŸŒŸ FIX: Ensure response.data.count is a valid number before setting state
Â  Â  Â  const count = response.data?.count;
Â  Â  Â  if (typeof count === 'number') {
Â  Â  Â  Â  setUnreadMessageCount(count);
Â  Â  Â  } else {
          console.error("Failed to parse message count from API:", response.data);
      }
Â  Â  } catch (error) { console.error("Failed to fetch unread message count:", error); }
Â  };

Â  useEffect(() => {
Â  Â  isLoggedIn();
Â  }, []);

Â  return (
Â  Â  <AuthContext.Provider value={{ 
Â  Â  Â  login, logout, userToken, isLoading, userId, username, 
Â  Â  Â  unreadCount, fetchUnreadCount, setUnreadCountDirectly, // ðŸŒŸ Exported Setter
Â  Â  Â  unreadMessageCount, fetchUnreadMessageCount, setUnreadMessageCountDirectly // ðŸŒŸ Exported Setter
Â  Â  }}>
Â  Â  Â  {children}
Â  Â  </AuthContext.Provider>
Â  );
};

export const useAuth = () => {
Â  return React.useContext(AuthContext);
};
