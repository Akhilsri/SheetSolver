const jwt = require('jsonwebtoken');

function authMiddleware(req, res, next) {
Â  // 1. Get the token from the Authorization header
Â  const authHeader = req.headers.authorization;

Â  // 2. Check if the token exists and is in the correct format
Â  if (!authHeader || !authHeader.startsWith('Bearer ')) {
Â  Â  // ðŸŒŸ FIX: Use console.debug or console.log instead of console.error 
    // for this expected, temporary error condition (during logout/redirect).
Â  Â  console.log('--- Auth Middleware: Token missing during expected logout sequence (401 sent). ---'); 
Â  Â  return res.status(401).json({ message: 'Authentication token required.' });
Â  }

Â  const token = authHeader.split(' ')[1];

Â  try {
Â  Â  // 3. Verify the token using the secret key
Â  Â  const decodedPayload = jwt.verify(token, process.env.JWT_SECRET);
Â  

Â  Â  // 4. Attach the user's info (from the token) to the request object
Â  Â  req.user = decodedPayload;

Â  Â  // 5. Pass control to the next function in the chain (the controller)
Â  Â  next();
Â  } catch (error) {
Â  Â  // If verification fails (invalid/expired token)
Â  Â  // Keep the console.error for true token failures (like 'jwt expired')
Â  Â  console.error('Token verification failed:', error.message);
Â  Â  return res.status(403).json({ message: 'Invalid or expired token.' });
Â  }
}

module.exports = authMiddleware;
